'use strict';

var lab = require('lab'),
    path = require('path'),
    hgcmd = require('../'),
    root = path.resolve(path.join(__dirname, '..'));

lab.test('paths', function (done) {
    hgcmd(root, 'paths', undefined, function (err, outputs) {
        if (err) {
            throw err;
        }
        lab.expect(outputs instanceof Array);
        lab.expect(outputs.length > 0);
        lab.expect(outputs[0].match(/^default\s*=/));
        done();
    });
});

lab.test('status', function (done) {
    hgcmd.status(root, function (err, statusMap) {
        if (err) {
            throw err;
        }
        lab.expect('index.js' in statusMap);
        done();
    });
});

lab.test('status in subdirectory of root', function (done) {
    hgcmd.status(__dirname, function (err, statusMap) {
        if (err) {
            throw err;
        }
        lab.expect('index.js' in statusMap);
        done();
    });
});

lab.test('parents', function (done) {
    hgcmd.parents(root, function (err, parents) {
        if (err) {
            throw err;
        }
        // parents can have two members during merge
        lab.expect(parents[0]).to.have.property('branch').a('string');
        lab.expect(parents[0]).to.have.property('node').a('string');
        lab.expect(parents[0]).to.have.property('p1node').a('string');
        lab.expect(parents[0]).to.have.property('p2node').a('string');
        done();
    });
});

lab.test('bad command', function (done) {
    hgcmd(root, 'halibut', [], function (err) {
        lab.expect(err instanceof Error).to.be.ok;
        lab.expect(err.message).to.match(/hg: unknown/);
        done();
    });
});

lab.test('bad hg', function (done) {
    process.env.PATH = '';
    hgcmd(root, 'status', [], function (err) {
        lab.expect(err instanceof Error).to.be.ok;
        lab.expect(err.message).to.match(/spawn ENOENT/);
        done();
    });
});

lab.test('bad root', function (done) {
    hgcmd('UNLIKELY', 'status', [], function (err) {
        lab.expect(err instanceof Error).to.be.ok;
        lab.expect(err.message).to.match(/ENOENT, stat/);
        done();
    });
});
