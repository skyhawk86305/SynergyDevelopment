'use strict';

var hg = require('hg'),
    fs = require('fs'),
    domain = require('domain'),
    assert = require('assert');

function ignore() {}

function hgcmd(repoPath, cmd, args, callback) {
    assert(typeof(repoPath) === 'string');
    assert(typeof(cmd) === 'string');
    assert(args === undefined || args instanceof Array);
    assert(typeof(callback) === 'function');

    var outputs = { },
        expectingExit = false,
        server,
        hgdomain;

    function cberr(err) {
        if (hgdomain) {
            hgdomain.exit();
            hgdomain = null;
            return callback(err);
        } // else repeated callback
    }

    function cbresult(res) {
        hgdomain.exit();
        return callback(null, res);
    }

    function onExit(code) {
        if (!expectingExit) {
            cberr(new Error('hg: premature exit with code: ' + code));
        } else if (code) {
            cberr(new Error('hg: exit with code: ' + code), outputs);
        } else if ('e' in outputs) {
            cberr(new Error(outputs.e[0].trim()));
        } else {
            cbresult(outputs.o);
        }
    }

    function onResult() {
        expectingExit = true;
        server.stop();
    }

    function onOutputEntry(entry) {
        assert(entry.channel);
        assert(entry.body);
        if (entry.channel in outputs) {
            outputs[entry.channel].push(entry.body);
        } else {
            outputs[entry.channel] = [ entry.body ];
        }
    }

    function onOutput(raw, cooked) {
        ignore(raw);
        assert(cooked instanceof Array);
        cooked.forEach(onOutputEntry);
    }

    function onStart(err) {
        if (err) {
            return cberr(err);
        }

        server.on('output', onOutput);
        server.on('result', onResult);
        server.on('exit', onExit);
        server.runcommand(cmd, args);
    }

    function onStat(err) {
        if (err) {
            cberr(err);
        } else {
            server = new hg.HGCommandServer();
            server.on('error', cberr);
            server.start(repoPath, onStart);
        }
    }

    hgdomain = domain.create();
    hgdomain.enter();
    hgdomain.on('error', cberr);
    fs.stat(repoPath, onStat);
}

module.exports = hgcmd;

hgcmd.status = require('./status').bind(undefined, hgcmd);
hgcmd.parents = require('./parents').bind(undefined, hgcmd);
