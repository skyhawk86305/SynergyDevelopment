'use strict';

var lab = require('lab'),
    makeBench = require('./lib/bench'),
    https = require('https');

lab.experiment('routes with config.auth = \'noauth\'', function() {
    var bench = makeBench({
            routes: {
                path: '/test',
                method: 'GET',
                config: {
                    auth: 'noauth'
                },
                handler: function (request, reply) {
                    if (checkReq) {
                        checkReq(request);
                    }
                    reply('success').code(200);
                }
            }
        }),
        checkReq,
        checked;

    lab.before(bench.before);
    lab.after(bench.after);

    lab.beforeEach(function (done) {
        checkReq = undefined;
        checked = false;
        done();
    });

    function mkt(fn) {
        return function (done) {
            bench.check();
            checkReq = fn;
            https.get(bench.makeGetOptions('/test'), function (res) {
                lab.expect(res.statusCode).to.equal(200, 'request failed');
                lab.expect(checked).to.equal(true, 'checks failed or not run');
                done();
            }).on('error', function (err) {
                done(err);
            });
        };
    }

    lab.test('request.auth.isAuthenticated is true', mkt(function (req) {
        lab.expect(req).to.have.property('auth');
        lab.expect(req.auth.isAuthenticated).to.equal(true);
        checked = true;
    }));

    lab.test('request.auth.credentials is empty object', mkt(function (req) {
        lab.expect(req).to.have.property('auth');
        lab.expect(req.auth.credentials).to.eql({ });
        checked = true;
    }));
});

