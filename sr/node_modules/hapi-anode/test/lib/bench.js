'use strict';

var lab = require('lab'),
    _ = require('lodash'),
    assert = require('assert'),
    url = require('url'),
    bunyan = require('bunyan'),
    AuthStub = require('authstub'),
    BenchTest = require('hapi-bench-test');

var BENCHTEST_DEBUG = process.env.BENCHTEST_DEBUG === 'true',
    TEST_MANIFEST = require('../../manifest.json'),
    PLUGIN_PATH = '../';

function dlog(msg) {
    if (BENCHTEST_DEBUG) {
        console.error(msg);
    }
}

function getManifest() {
    var manifest = _.cloneDeep(TEST_MANIFEST),
        options = manifest.plugins[PLUGIN_PATH];

    // aim at stubbed authentication server
    options.server = 'https://127.0.0.1:3025';

    // make the connection port ephemeraal
    assert.equal(manifest.connections[0].port, '8443', 'wrong connection');
    manifest.connections[0].port = 0;

    return manifest;
}

function shouldShowLogs() {
    return BENCHTEST_DEBUG;
}

function makeBench(options) {
    var oldStyleLog = bunyan.createLogger({
            name: 'bench',
            level: BENCHTEST_DEBUG ? 10 : 60
        });

    var manifest = getManifest(),
        testBench = {
        // note confusing indentation here
        bench: null,
        server: null,
        authstub: null,
        manifest: manifest,
        options: manifest.plugins[PLUGIN_PATH],

        before: function testBenchBefore(done) {
            var bench = new BenchTest({
                home: __dirname + '/../../',
                manifest: testBench.manifest,
                logFilter: shouldShowLogs
            });
            bench.start(function started(err, server) {
                if (!err) {
                    if (options && options.routes) {
                        dlog('injecting routes');
                        server.route(options.routes);
                    }

                    // We can set redirect_uri_base after the server
                    // starts by adjusting server.app.redirect_uri_base:
                    // jshint camelcase: false
                    server.app.redirect_uri_base = url.format({
                        protocol: server.info.protocol,
                        port: server.info.port,
                        hostname: server.info.address
                    });

                    var authstub = new AuthStub(oldStyleLog);
                    authstub.start(function (err2, _url) {
                        if (!err) {
                            testBench.bench = bench;
                            testBench.server = server;
                            testBench.authstub = authstub;
                            testBench.authurl = _url;
                        }
                        return done(err);
                    });
                } else {
                    return done(err);
                }
            });
        },

        check: function testBenchCheck(done) {
            lab.expect(testBench.bench).to.be.a('object', 'test bench not OK');
            lab.expect(testBench.server).to.be.a('object', 'test server not OK');
            if (done) {
                done();
            }
        },

        after: function testBenchAfter(done) {
            dlog('Tearing down test bench...');

            delete global.fpath;

            function _done() {
                dlog('... done');
                done();
            }

            if (testBench.bench) {
                var bench = testBench.bench,
                    authstub = testBench.authstub;
                testBench.bench = null;
                testBench.server = null;
                testBench.authstub = null;
                dlog('... stopping server...');
                bench.stop(function() {
                    dlog('... stopping authentication stub...');
                    authstub.close(_done);
                });
            } else {
                _done();
            }
        },

        makeGetOptions: function makeGetOptions(path) {
            return {
                hostname: testBench.server.info.address,
                port: testBench.server.info.port,
                rejectUnauthorized: false,
                agent: false,
                protocol: 'https:',
                path: path,
                pathname: path,
            };
        },

        makeURL: function makeURL(path) {
            return url.format(testBench.makeGetOptions(path));
        }
    };

    return testBench;
}

module.exports = makeBench;

