'use strict';

var lab = require('lab'),
    makeBench = require('./lib/bench'),
    Browser = require('microbrowsery'),
    util = require('util'),
    _ = require('lodash');

lab.experiment('routes with config.auth = \'known\'', function() {
    var bench = makeBench({
            routes: {
                path: '/test',
                method: 'GET',
                config: {
                    auth: 'known'
                },
                handler: function (request, reply) {
                    reply({
                        fromHandler: true,
                        auth: request.auth,
                        query: request.query
                    }).code(200);
                }
            }
        });

    lab.before(bench.before);
    lab.after(bench.after);

    function mkt(fn) {
        return function perform(done) {
            // jshint camelcase: false
            bench.check();
            bench.authstub.setUser('user', bench.options.client_id);
            var browser = new Browser({
                log: {
                    debug: function () {
                        if (process.env.BENCHTEST_DEBUG === 'true') {
                            console.error('browser:', util.inspect(_.toArray(arguments), {
                                depth: null,
                                colors: true
                            }));
                        }
                    }
                }
            });
            browser.makeRequest(bench.makeURL('/test'), { strictSSL: false }, function (err, res) {
                browser.log.debug(err, res);
                try {
                    res.body = JSON.parse(res.body);
                } catch (parseError) {
                    // aah, well
                }
                fn(err, res, done);
            });
        };
    }

    lab.test('return 200 OK with the handler response', mkt(function (err, res, done) {
        lab.expect(err).to.equal(null);
        lab.expect(res.statusCode).to.equal(200);
        lab.expect(res.body).to.have.property('fromHandler');
        done();
    }));

    lab.test('get .auth.isAuthenticated true', mkt(function (err, res, done) {
        lab.expect(res.body.auth.isAuthenticated).to.equal(true);
        done();
    }));


    lab.test('get .auth.credentials with correct .user', mkt(function (err, res, done) {
        lab.expect(res.body.auth).to.have.property('credentials');
        lab.expect(res.body.auth.credentials).to.have.property('user');
        lab.expect(res.body.auth.credentials.user).to.equal('user');
        done();
    }));

    lab.test('get .auth.artifacts with .token', mkt(function (err, res, done) {
        lab.expect(res.body.auth).to.have.property('artifacts');
        lab.expect(res.body.auth.artifacts).to.have.property('token');
        done();
    }));

    lab.test('do not get the authorization code', mkt(function (err, res, done) {
        lab.expect(res.body.query).to.not.have.property('code');
        done();
    }));
});

