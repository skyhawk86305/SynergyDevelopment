'use strict';

var joi = require('joi'),
    boom = require('boom');

 function permissive(server) {
    function authenticate(request, reply) {
        request.log(['auth', 'trace'], 'permitting all');
        reply.continue({ credentials: {} });
    }

    server.log(['auth', 'registration', 'strategy'], 'strategy used scheme: permissive');
    return { authenticate: authenticate };
}

function restrictive(server) {
    function authenticate(request, reply) {
        request.log(['auth', 'error'], 'authentication not configured on route');
        reply(boom.forbidden('authentication not configured'));
    }

    server.log(['auth', 'registration', 'strategy'], 'strategy used scheme: restrictive');
    return { authenticate: authenticate };
}

function checkPluginOptions(options, callback) {
    // jshint camelcase: false
    var schema = joi.object().keys({
        'server': joi.string().required(),
        'redirect_uri_base': joi.string().required(),
        'client_id': joi.string().required(),
        'client_secret': joi.string().required(),
        'insecure': joi.boolean(),
        'sessionSecs': joi.number().integer().unit('seconds').default(3600),
        'paths': joi.object().keys({
            'auth': joi.string().required(),
            'token': joi.string().required(),
            'userDetails': joi.string().required(),
            'uid': joi.string().required(),
        }),
        'access': joi.object().keys({
            'allow_customer': joi.boolean()
        })
    });

    joi.validate(options, schema, callback);
}

/**
 * @function register
 * @desc Register the authentication scheme with Hapi.
 */

function register(authenticate, server, options, next) {
    if (arguments.length === 1) {
        return register.bind(null, authenticate);
    }

    server.dependency('yar');

    return checkPluginOptions(options, function (err) {
        if (err) {
            return next(err);
        } else {
            return registerSchemeAndStrategies();
        }
    });

    // closed around options, next
    function registerSchemeAndStrategies() {
        server.log(['auth'], 'registering schemes and strategies');

        server.auth.scheme('permissive', permissive);
        server.auth.scheme('restrictive', restrictive);
        server.auth.scheme('anode', authenticate);

        // force assignment of a strategy to all routes by installing a default
        // strategy which refuses all requests:
        server.auth.strategy('nobody', 'restrictive', true);

        // no authentication or user identification
        server.auth.strategy('noauth', 'permissive');

        // known user
        server.auth.strategy('known', 'anode', false, options);

        next();
    }
}

module.exports = register;

