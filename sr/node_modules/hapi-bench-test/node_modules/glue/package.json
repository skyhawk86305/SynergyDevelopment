{
  "name": "glue",
  "description": "Server composer for hapi.js",
  "version": "2.0.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/glue"
  },
  "main": "index",
  "keywords": [
    "server",
    "pack",
    "composer",
    "manifest",
    "hapi"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hapi": "8.x.x",
    "hoek": "2.x.x",
    "items": "1.x.x",
    "joi": "5.x.x"
  },
  "devDependencies": {
    "catbox-memory": "1.x.x",
    "code": "1.x.x",
    "lab": "5.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/glue/raw/master/LICENSE"
    }
  ],
  "readme": "#glue\n\nServer composer for hapi.js.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/glue.png)](http://travis-ci.org/hapijs/glue)\n\nLead Maintainer - [Chris Rempel](https://github.com/csrl)\n\n## Interface\n\nGlue exports a single function `compose` accepting a JSON `manifest` file specifying the Hapi server options, connections and plugins.  Glue primarily works in synergy with [Rejoice](https://github.com/hapijs/rejoice), but can be integrated directly into any Hapi application loader.\n\n- `compose(manifest, [options], callback)`\n  + `manifest` - an object having:\n    * 'server' - an object containing the options passed to [`new Server([options])`](http://hapijs.com/api#new-serveroptions)\n    * 'connections' - an array of connection options, passed individually in calls to [`server.connection([options])`](http://hapijs.com/api#serverconnectionoptions)\n    * 'plugins' - an object holding plugin entries to register with [`server.register(plugins, [options], callback)`](http://hapijs.com/api#serverregisterplugins-options-callback).  Each key is the `name` of the plugin to load and register and the value is one of:\n      + an object to use as the plugin options which get passed to the plugin's registration function when called.\n      + an array of objects where each object will load a separate instance of the plugin. Multiple instances of a plugin is only possible if the plugin's `attributes.multiple` is `true`. Each object can have:\n        * any option from [`server.register`](http://hapijs.com/api#serverregisterplugins-options-callback) options\n        * `options` - an object to use as the plugin options which get passed to the plugin's registration function when called.\n  + `options` - an object having\n    * 'relativeTo' - a file-system path string that is used to resolve loading modules with `require`.  Used in `server.cache` and `plugins[name]`\n    * 'preConnections' - a callback function that is called prior to adding connections to the server. The function signature is `function (server)` where:\n      + `server` - is the server object returned from `new Server(options)`.\n    * 'prePlugins' - a callback function that is called prior to registering plugins with the server. The function signature is `function (server)` where:\n      + `server` - is the server object with all connections selected.\n  + `callback` - the callback function with signature `function (err, server)` where:\n    * `err` - the error response if a failure occurred, otherwise `null`.\n    * `server` - the server object. Call `server.start()` to actually start the server.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/glue/issues"
  },
  "homepage": "https://github.com/hapijs/glue",
  "_id": "glue@2.0.0",
  "_from": "glue@^2.0.0"
}
