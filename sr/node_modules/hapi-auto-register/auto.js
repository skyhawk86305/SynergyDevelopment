'use strict';

var assert = require('assert'),
    async = require('async'),
    fs = require('fs'),
    path = require('path'),
    _ = require('lodash');

/**
 * Too Clever By Half Dept.: automatically call all modules in dirname
 * directory exporting a 3-arity function 'register'.
 */

function autoRegisterFromThisDirectory(dirname, server, options, next) {
    assert.equal(typeof dirname, 'string');
    assert(server);
    assert(options);
    assert.equal(typeof next, 'function');

    server.log(['auto', 'launch'], {
        what: 'registering automatic plugin modules',
        path: dirname,
    });

    function makeRegistrationTask(module, file) {
        return function registerModule(_next) {
            server.log(['auto', 'launch', 'register'], {
                file: file,
                name: module.name,
            });
            module.register(server, options, _next);
        };
    }

    fs.readdir(dirname, function (err, files) {
        if (err) {
            next(err);
        }

        var registrationTasks = _(files)
            .filter(isJavaScript)
            .without('index.js')
            .map(taskify)
            .filter()
            .value();

        async.series(registrationTasks, next);
    });

    function taskify(file) {
        var module = _require(dirname, file);
        if (isAutoModule(module)) {
            return makeRegistrationTask(module, file);
        } else {
            return null;
        }
    }
}

function isJavaScript(name) {
    return path.extname(name) === '.js';
}

function _require(dirname, file) {
    return require(path.join(dirname, file));
}

function isAutoModule(module) {
    if (!module.register) {
        return false;
    }

    var isFunction = typeof module.register === 'function',
        isRegister = module.register.name === 'register',
        isThreeArity = module.register.length === 3;

    return isFunction && isRegister && isThreeArity;
}

module.exports = autoRegisterFromThisDirectory;
