'use strict';

var lab = require('lab'),
    gulpUtil = require('gulp-util');

lab.experiment('the module', function() {
    var theModule;

    lab.before(function(done) {
        theModule = require('../');
        done();
    });

    lab.test('exports a 2-arity function', function (done) {
        lab.expect(theModule).to.be.a('function');
        lab.expect(theModule.length).to.eql(2);
        done();
    });

    lab.test('... with a \'version\' string property', function (done) {
        lab.expect(theModule).to.have.property('version');
        lab.expect(theModule.version).to.be.a('string');
        done();
    });
});

lab.experiment('the function\'s return value', function() {
    var gulpex;

    lab.before(function(done) {
        // gulpex calls gulp.on and process.on, so we need to fake those
        // out otherwise we'll screw up the tests.
        var fakeGulp = {
                isFakeGulp: true,
                from: 'test/require.js',
                tasks: true,
                on: function () {} },
            originalProcessOn = process.on;
        process.on = fakeGulp.on;

        // the test subject itself:
        gulpex = require('../')(fakeGulp);

        // restore process.on and call back
        process.on = originalProcessOn;
        done();
    });

    lab.test('is an object', function (done) {
        lab.expect(gulpex).to.be.a('object');
        done();
    });

    lab.test('... with a \'run\' 1-arity function prop', function (done) {
        lab.expect(gulpex).to.have.property('run');
        lab.expect(gulpex.run).to.be.a('function');
        lab.expect(gulpex.run.length).to.eql(1);
        done();
    });

    lab.test('... with a  \'clean\' 1-arity function prop', function (done) {
        lab.expect(gulpex).to.have.property('clean');
        lab.expect(gulpex.clean).to.be.a('function');
        lab.expect(gulpex.clean.length).to.eql(1);
        done();
    });

    lab.test('... with gulp-util exposed as \'util\'', function (done) {
        lab.expect(gulpex).to.have.property('util');
        lab.expect(gulpex.util).to.eql(gulpUtil);
        done();
    });
});
