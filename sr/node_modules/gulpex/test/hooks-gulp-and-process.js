'use strict';

var lab = require('lab');

lab.experiment('when called with gulp as an argument', function() {
    var processHooks = {},
        gulpHooks = {};

    function makeOn(masterBucket) {
        return function (event) {
            var bucket = (masterBucket[event] = masterBucket[event] || []);
            bucket.push(arguments);
        };
    }

    lab.before(function(done) {
        var gulpex = require('../'),
            originalProcessOn = process.on,
            fakeGulp = {
                isFakeGulp: true,
                from: 'test/hooks-gulp-and-process',
                tasks: true,
                on: makeOn(gulpHooks),
            };
        process.on = makeOn(processHooks);
        gulpex(fakeGulp);
        process.on = originalProcessOn;
        done();
    });

    function describeCount(n) {
        if (n === 0) {
            return 'never';
        } else if (n === 1) {
            return 'once';
        } else if (n === 2) {
            return 'twice';
        } else {
            return n + ' times';
        }
    }

    function countGulpHooks(eventName, expectedCount) {
        var desc = [
                'hooks',
                'gulp:' + eventName,
                describeCount(expectedCount)
            ].join(' ');
        lab.test(desc, function (done) {
            lab.expect(gulpHooks[eventName].length).to.eql(expectedCount);
            done();
        });
    }

    countGulpHooks('err', 2);
    countGulpHooks('stop', 1);
    countGulpHooks('task_err', 2);
    countGulpHooks('task_start', 2);
    countGulpHooks('task_stop', 2);

    lab.test('hooks process:exit twice', function (done) {
        lab.expect(processHooks.exit.length).to.eql(2);
        done();
    });
});
