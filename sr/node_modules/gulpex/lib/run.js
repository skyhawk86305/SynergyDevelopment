'use strict';

var path = require('path'),
    spawn = require('child_process').spawn,
    _ = require('lodash');

function run(options, command) {
    // run(options) -> something you can call with run(command)
    if (typeof options === 'object' && arguments.length === 1) {
        // jshint -W040
        return run.bind(this, options);
    }

    var args = _.toArray(arguments);

    if (typeof options === 'object') {
        // pull options out of args
        options = args.shift();
    } else {
        // give blank options
        options = {};
    }

    // pull command out of args
    command = args.shift();

    if (args.length === 0 && command.indexOf(' ') >= 0) {
        // split command into args and command
        // note UNIX-ey assumptions
        args = command.split(' ');
        command = args.shift();
    }

    // set up the environment
    var env = _.clone(process.env),
        spawnOptions = {
            env: env,
            stdio: 'inherit',
        };

    if (options.extraPaths) {
        env.PATH = options.extraPaths.concat([ env.PATH ]).join(path.delimiter);
    }

    // return task function
    return function spawnTask(callback) {
        callback = _.once(callback);

        spawn(command, args, spawnOptions)
            .on('close', onClose)
            .on('error', callback);

        function onClose(code) {
            if (!code) {
                callback(null);
            } else {
                callback(new Error(command + ' failed with code: ' + code));
            }
        }
    };
}

module.exports = run;
