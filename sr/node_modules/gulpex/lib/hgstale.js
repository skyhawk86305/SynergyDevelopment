'use strict';

var hgcmd = require('hgcmd'),
    path = require('path'),
    fs = require('fs');

function invert(map) {
    var result = {};
    for (var key in map) {
        var value = map[key],
            bucket = result[value] || (result[value] = []);
        bucket.push(key);
    }
    return result;
}

function inrepo(root, cb1) {
    var dotHG = path.join(root, '.hg');
    fs.stat(dotHG, function withStats(err /*, stats */) {
        if (!err) {
            return cb1(true);
        }

        var newRoot = path.dirname(root);
        if (newRoot === root) {
            cb1(false);
        } else {
            setImmediate(inrepo, newRoot, cb1);
        }
    });
}

function hgstale(root, callback) {
    inrepo(root, withRepoCheck);

    function withStatus(err, statusMap) {
        if (err) {
            callback(err);
        } else {
            var map = invert(statusMap);
            delete map.C; // clean
            delete map.I; // ignored
            if (Object.keys(map).length === 0) {
                map = null;
            }
            callback(null, map);
        }
    }

    function withRepoCheck(result) {
        if (!result) {
            return callback(new Error(hgstale.NOT_IN_REPO));
        }

        hgcmd.status(root, withStatus);
    }
}

hgstale.NOT_IN_REPO = 'target directory is not in an hg repository';

module.exports = hgstale;
