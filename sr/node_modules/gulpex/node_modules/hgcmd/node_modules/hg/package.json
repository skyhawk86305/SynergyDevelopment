{
  "name": "hg",
  "version": "0.1.1",
  "description": "A Mercurial client for Node",
  "main": "index.js",
  "repository": {
    "type": "hg",
    "url": "https://bitbucket.org/jacob4u2/node-hg"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt"
  },
  "keywords": [
    "mercurial",
    "hg",
    "client"
  ],
  "author": {
    "name": "Jacob Gable",
    "email": "jacob.gable@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "grunt": "0.4.x",
    "should": "~1.2.2",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "~1.17.1"
  },
  "dependencies": {
    "coffee-script": ">= 1.4.0",
    "lodash": ">= 1.0.0",
    "winston": ">= 0.5.0",
    "uuid": "~1.4.0"
  },
  "readme": "Node-hg\n=======\n\nA node js [command server](http://mercurial.selenic.com/wiki/CommandServer) client for [Mercurial](http://mercurial.selenic.com).\n\n### Installation\n\n    npm install hg\n\n### Example\n\n```javascript\nvar path = require(\"path\");\n\nvar hg = require(\"hg\");\n\n// Clone into \"../example-node-hg\"\nvar destPath = path.resolve(path.join(process.cwd(), \"..\", \"my-node-hg\"));\n\nhg.clone(\"http://bitbucket.org/jgable/node-hg\", destPath, function(err, output) {\n\tif(err) {\n\t\tthrow err;\n\t}\n\n\toutput.forEach(function(line) {\n\t\tconsole.log(line.body);\n\t});\n\n\t// Add some files to the repo with fs.writeFile, omitted for brevity\n\n\thg.add(destPath, [\"someFile1.txt\", \"someFile2.txt\"], function(err, output) {\n\t\tif(err) {\n\t\t\tthrow err;\n\t\t}\n\n\t\toutput.forEach(function(line) {\n\t\t\tconsole.log(line.body);\n\t\t});\n\n\t\tvar commitOpts = {\n\t\t\t\"-m\": \"Doing the needful\"\n\t\t};\n\n\t\t// Commit our new files\n\t\thg.commit(destPath, commitOpts, function(err, output) {\n\t\t\tif(err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\toutput.forEach(function(line) {\n\t\t\t\tconsole.log(line.body);\n\t\t\t});\n\t\t});\n\t});\n});\n```\n\n### Exposed Base Classes\n\n#### HGRepo\n\nThe base class for Mercurial Repo interaction.  The exposed API is just wrappers around the functions available in `HGRepo`.\n\n```javascript\nvar hg = require(\"hg\"),\n\tHGRepo = hg.HGRepo;\n\nvar repo = new HGRepo(\"/some/path/to/repo\");\n\nrepo.summary(function(err, output) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\toutput.forEach(function(line) {\n\t\tconsole.log(line.body);\n\t});\n});\n\nrepo.add([\".\"], function(err, output) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\toutput.forEach(function(line) {\n\t\tconsole.log(line.body);\n\t});\n});\n\n// And so on...\n\n```\n\n#### HGCommandServer\n\nThe base class responsible for instantiating and communicating with a Mercurial command server.  Must be instantiated in an existing Mercurial repository (check out `HGRepo.MakeTempRepo` to quickly get a temporary repo up)\n\n```javascript\nvar hg = require(\"hg\"),\n\tHGCommandServer = hg.HGCommandServer;\n\nvar serv = new HGCommandServer();\n\nserv.start(\"/some/path/to/repo\", function(err) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\tconsole.log(\"Command Server Started\", serv.capabilities, serv.encoding);\n\n\tserv.on(\"output\", function(err, lines) {\n\t\tlines.forEach(function(line) {\n\t\t\tconsole.log(line.body);\n\t\t});\n\t});\n\n\tserv.runcommand(\"summary\");\n});\n```\n\nLICENSE\n=======\n\n[MIT](http://opensource.org/licenses/MIT), No Attribution Required, Copyright 2013 [Jacob Gable](http://jacobgable.com)",
  "readmeFilename": "README.md",
  "_id": "hg@0.1.1",
  "_from": "hg@^0.1.1"
}
